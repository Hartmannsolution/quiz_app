{
  "quizzes": [
    {
      "name": "network",
      "data": [
        {
          "question": "What is a socket in Java networking?",
          "answer": "A socket is an endpoint for communication between two machines over a network in Java."
        },
        {
          "question": "What are the two types of sockets in Java?",
          "answer": "The two types of sockets in Java are: ServerSocket and Socket."
        },
        {
          "question": "How can you create a TCP server socket in Java?",
          "answer": "##ServerSocket serverSocket = new ServerSocket(portNumber);"
        },
        {
          "question": "How can you create a TCP client socket in Java?",
          "answer": "##Socket clientSocket = new Socket(serverAddress, serverPort);"
        },
        {
          "question": "What is a network protocol?",
          "answer": "A network protocol is a set of rules that governs the communication between computers on a network."
        },
        {
          "question": "What are the most important protocols in networking?",
          "answer": "The most important protocols in networking are: IP, TCP, HTTP."
        },
        {
          "question": "What are the accronyms of IP, TCP, HTTP?",
          "answer": "They are: IP - Internet Protocol, TCP - Transmission Control Protocol, HTTP - HyperText Transfer Protocol."
        },
        {
          "question": "What is an IP address?",
          "answer": "An IP address is a unique identifier for a computer or device on a TCP/IP network."
        },
        {
          "question": "What is a port number?",
          "answer": "A Port number is a way to identify a specific process to which an Internet or other network message is to be forwarded when it arrives at a server."
        },
        {
          "question": "What is a DNS server?",
          "answer": "A DNS server is a computer server that contains a database of public IP addresses and their associated hostnames."
        },
        {
          "question": "What is a DHCP server?",
          "answer": "A DHCP server is a network server that automatically provides and assigns IP addresses, default gateways and other network parameters to client devices."
        },
        {
          "question": "In the EchoServer of our demo code, why can we only make one request from the client to the server?",
          "answer": "It is because the server is only listening for one request from the client. Once the server receives the request, it sends the response and then closes the connection."
        },
        {
          "question": "What is the purpose of the while loop in the start method of the RequestDataServer?",
          "answer": "It is to enable the server to listen for multiple requests from the client. Once the server receives a request, it sends the response and then goes back to listening for another request."
        },
        {
          "question": "What is an inputStream?",
          "answer": "It is a sequence of bytes that you can read from."
        },
        {
          "question": "How can we write to an OutputStream?",
          "answer": "##new PrintWriter(clientSocket.getOutputStream(), true).println(inputLine);"
        },
        {
          "question": "What is GET and POST in HTTP?",
          "answer": "HTTP method GET is used to request data from a specified resource. HTTP method POST is used to send data to a server to create/update a resource."
        },
        {
          "question": "What are HTTP headers for?",
          "answer": "They are for passing additional information with an HTTP request or response, so that the client and server can understand each other better."
        },
        {
          "question": "In RequestFileServer, there is a statement: 'RequestDTO requestDTO = generateRequestObject(in);'. Where does the generateRequestObject method come from? and what does it do?",
          "answer": "It is inherited from the RequestDataServer class. It is used to create a RequestDTO object from the input stream."
        },
        {
          "question": "When do we need Input- or OutputStreams?",
          "answer": "When we want to read from or write to a file, a network connection, or any other I/O source."
        }
      ]
    },
    {
      "name": "threads",
      "data":[
        {
          "question": "What is a thread?",
          "answer": "A thread is a lightweight sub-process, the smallest unit of processing. It is a separate path of execution."
        }, 
        {
          "question": "What is the difference between a process and a thread?",
          "answer": "A process is a program in execution, whereas a thread is a single path of execution within a process."
        },
        {
          "question": "What is the purpose of the start method in a thread?",
          "answer": "It is used to start the execution of a thread. The Java Virtual Machine calls the run method of the thread."
        },
        {
          "question": "What is the purpose of the run method in a thread?",
          "answer": "It is used to perform the task for the thread. It is the entry point for the thread."
        },
        {
          "question": "What is the purpose of the sleep method in a thread?",
          "answer": "It is used to pause the execution of the thread for a specified amount of time."
        },
        {
          "question": "What is the purpose of the join method in a thread?",
          "answer": "It is used to wait for a thread to die."
        },
        {
          "question": "What is the purpose of the getName method in a thread?",
          "answer": "It is used to return the name of the thread."
        },
        {
          "question": "What is a Callable?",
          "answer": "A Callable is a thread that returns a result and may throw an exception."
        },
        {
          "question": "What is the purpose of the ExecutorService?",
          "answer": "It is used to manage and control the thread pool."
        },
        {"question": "What is the purpose of the submit method in the ExecutorService?",
          "answer": "It is used to submit a Callable or a Runnable task to the thread pool."
        },
        {
          "question": "What is returned by the submit method in the ExecutorService?",
          "answer": "It returns a Future object."
        },
        {
          "question": "What is a Future?",
          "answer": "A Future is a result of an asynchronous computation."
        },
        {
          "question": "What is the purpose of the get method in the Future?",
          "answer": "It is used to retrieve the result of the asynchronous computation."
        },
        {
          "question": "What is the purpose of the isDone method in the Future?",
          "answer": "It is used to check if the asynchronous computation is done."
        },
        {
          "question": "What is the purpose of the awaitTermination method in the ExecutorService?",
          "answer": "It is used to wait for the thread pool to terminate."
        },
        {
          "question": "What is the purpose of the newFixedThreadPool method in the Executors class?",
          "answer": "It is used to create a fixed-size thread pool."
        },
        {
          "question": "What is the purpose of the newCachedThreadPool method in the Executors class?",
          "answer": "It is used to create a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available."
        },
        {
          "question": "Why do we need 2 loops to get the result from the executor service?",
          "answer": "The first loop is to submit the tasks to the executor service. The second loop is to read the result from the executor service."
        }
      ]
    },
    {
      "name": "router",
      "data": [
        {
          "question":"What is URL",
          "answer":"The URL in the address bar. A lot of people use the term 'URL' and 'route' interchangeably, but this is not a route in React Router, it's just a URL."
        },
        {
          "question":"What is Location",
          "answer":"This is a React Router specific object that is based on the built-in browser's window.location object. It represents 'where the user is at'. It's mostly an object representation of the URL but has a bit more to it than that."
        },
        {
          "question":"What is Location State",
          "answer":"A value that persists with a location that isn't encoded in the URL. Much like hash or search params (data encoded in the URL), but stored invisibly in the browser's memory."
        },
        {
          "question":"What is History Stack",
          "answer":"As the user navigates, the browser keeps track of each location in a stack. If you click and hold the back button in a browser you can see the browser's history stack right there."
        },
        {
          "question":"What is Client Side Routing (CSR)",
          "answer":"A plain HTML document can link to other documents and the browser handles the history stack itself. Client Side Routing enables developers to manipulate the browser history stack without making a document request to the server."
        },
        {
          "question":"What is History",
          "answer":"An object that allows React Router to subscribe to changes in the URL as well as providing APIs to manipulate the browser history stack programmatically."
        },
        {
          "question":"What is History Action",
          "answer":"One of POP, PUSH, or REPLACE. Users can arrive at a URL for one of these three reasons. A push when a new entry is added to the history stack (typically a link click or the programmer forced a navigation). A replace is similar except it replaces the current entry on the stack instead of pushing a new one. Finally, a pop happens when the user clicks the back or forward buttons in the browser chrome."
        },
        {
          "question":"What is Segment",
          "answer":"The parts of a URL or path pattern between the / characters. For example, '/users/123' has two segments."
        },
        {
          "question":"What is Path Pattern",
          "answer":"These look like URLs but can have special characters for matching URLs to routes, like dynamic segments ('/users/:userId') or star segments ('/docs/*'). They aren't URLs, they're patterns that React Router will match."
        },
        {
          "question":"What is Dynamic Segment",
          "answer":"A segment of a path pattern that is dynamic, meaning it can match any values in the segment. For example the pattern /users/:userId will match URLs like /users/123"
        },
        {
          "question":"What is URL Params",
          "answer":"The parsed values from the URL that matched a dynamic segment."
        },
        {
          "question":"What is Router",
          "answer":"Stateful, top-level component that makes all the other components and hooks work."
        },
        {
          "question":"What is Route Config",
          "answer":"A tree of routes objects that will be ranked and matched (with nesting) against the current location to create a branch of route matches."
        },
        {
          "question":"What is Route",
          "answer":"An object or Route Element typically with a shape of { path, element } or <Route path element>. The path is a path pattern. When the path pattern matches the current URL, the element will be rendered."
        },
        {
          "question":"What is Route Element",
          "answer":"Or <Route>. This element's props are read to create a route by <Routes>, but otherwise does nothing."
        },
        {
          "question":"What is Nested Routes",
          "answer":"Because routes can have children and each route defines a portion of the URL through segments, a single URL can match multiple routes in a nested 'branch' of the tree. This enables automatic layout nesting through outlet, relative links, and more."
        },
        {
          "question":"What is Relative links",
          "answer":"Links that don't start with / will inherit the closest route in which they are rendered. This makes it easy to link to deeper URLs without having to know and build up the entire path."
        },
        {
          "question":"What is Match",
          "answer":"An object that holds information when a route matches the URL, like the url params and pathname that matched."
        },
        {
          "question":"What is Matches",
          "answer":"An array of routes (or branch of the route config) that matches the current location. This structure enables nested routes."
        },
        {
          "question":"What is Parent Route",
          "answer":"A route with child routes."
        },
        {
          "question":"What is Outlet",
          "answer":"A component that renders the next match in a set of matches."
        },
        {
          "question":"What is Index Route",
          "answer":"A child route with no path that renders in the parent's outlet at the parent's URL."
        },
        {
          "question":"What is Layout Route ",
          "answer":"A parent route without a path, used exclusively for grouping child routes inside a specific layout."
        }
      ]
    }
  ]
}
